"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;






const ModuleContextCachedList = {};var _default =


new Proxy(function () {}, {



  apply: (target, thisArg, argumentsList) => {
    return contextReference(...argumentsList);
  },

  construct: (target, argumentsList, newTarget) => {
    const Class = contextReference();
    return new Class(...argumentsList);
  } });exports.default = _default;





function contextReference({
  cacheReferenceName = null } =
{}) {
  let context;
  if (cacheReferenceName && ModuleContextCachedList[cacheReferenceName]) {
    context = ModuleContextCachedList[cacheReferenceName];
  } else if (cacheReferenceName) {
    context = ModuleContextCachedList[cacheReferenceName] = createClassScope({ cacheReferenceName });
  } else {
    context = createClassScope();
  }
  return context;
}




function createClassScope({ cacheReferenceName } = {}) {var _class, _temp;
  const self = (_temp = _class = class ModuleContext {








    constructor({ target, cacheName = null }) {

      this.cacheName = cacheName;
      let proxified = this.proxify(target);
      return proxified;
    }


    proxify(target) {
      let cacheContext = this;
      let handler = {

        get: (target, property, receiver) => {
          if (property == 'moduleContext') {
            return cacheContext;
          } else {
            return target[property];
          }
        },

        apply: (target, thisArg, argumentsList) => {
          let instance;
          if (cacheContext.cacheName && self.targetCachedList[cacheContext.cacheName]) {
            instance = self.targetCachedList[cacheContext.cacheName];
          } else if (cacheContext.cacheName) {
            if (typeof argumentsList[0] == 'object') {
              self.targetCachedList[cacheContext.cacheName] = target.call(thisArg, Object.assign({ methodInstanceName: cacheContext.cacheName }, argumentsList[0]));
            } else {
              self.targetCachedList[cacheContext.cacheName] = target.call(thisArg, ...argumentsList);
            }
            instance = self.targetCachedList[cacheContext.cacheName];
            self.targetCounter.cached++;
          } else {
            instance = target.call(thisArg, ...argumentsList);

            if (process.env.SZN_DEBUG) {

              self.targetCounter.nonReferenced++;
              self.targetCachedList[Symbol.for(`${target.name} ${self.targetCounter.nonReferenced}`)] = instance;
            }
          }
          return instance;
        } };

      return new Proxy(target, handler);
    }}, _class.targetCachedList = {}, _class.targetCounter = { cached: 0, nonReferenced: process.env.SZN_DEBUG ? 0 : null }, _temp);



  Object.defineProperty(self, 'ModuleContextCachedList', {
    get: function () {
      return ModuleContextCachedList;
    } });


  if (cacheReferenceName) self.cacheReferenceName = cacheReferenceName;

  return self;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,